name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
   
      # - name: Build, tag, and push the image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: recruiter-assistant
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
      #     echo "Pushing image to ECR..."
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

      - name: Deploy on AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.HOSTNAME }}
          USER_NAME: ${{ secrets.USERNAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' docker-compose.yml
          sed -i -e 's/ECR_REGISTRY/'"$ECR_REGISTRY"'/' docker-compose.yml
          scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ${USER_NAME}@${HOSTNAME}:/tmp
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} '
            cd /tmp
            docker-compose -p $ECR_REPOSITORY down
            docker-compose -p $ECR_REPOSITORY up -d
          '